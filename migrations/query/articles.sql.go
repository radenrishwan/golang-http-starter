// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: articles.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (title, slug, body) VALUES ($1, $2, $3) RETURNING id, title, slug, body, created_at, updated_at
`

type CreateArticleParams struct {
	Title string
	Slug  string
	Body  string
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, createArticle, arg.Title, arg.Slug, arg.Body)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :one
DELETE FROM articles WHERE id = $1 RETURNING id, title, slug, body, created_at, updated_at
`

func (q *Queries) DeleteArticle(ctx context.Context, id pgtype.UUID) (Article, error) {
	row := q.db.QueryRow(ctx, deleteArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getArticleBySlug = `-- name: GetArticleBySlug :one
SELECT id, title, slug, body, created_at, updated_at FROM articles WHERE slug = $1 LIMIT 1
`

func (q *Queries) GetArticleBySlug(ctx context.Context, slug string) (Article, error) {
	row := q.db.QueryRow(ctx, getArticleBySlug, slug)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getArticleWithOffset = `-- name: GetArticleWithOffset :many
SELECT id, title, slug, body, created_at, updated_at FROM articles ORDER BY created_at DESC OFFSET $1 LIMIT $2
`

type GetArticleWithOffsetParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetArticleWithOffset(ctx context.Context, arg GetArticleWithOffsetParams) ([]Article, error) {
	rows, err := q.db.Query(ctx, getArticleWithOffset, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :one
UPDATE articles SET title = $1, slug = $2, body = $3 WHERE id = $4 RETURNING id, title, slug, body, created_at, updated_at
`

type UpdateArticleParams struct {
	Title string
	Slug  string
	Body  string
	ID    pgtype.UUID
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, updateArticle,
		arg.Title,
		arg.Slug,
		arg.Body,
		arg.ID,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
